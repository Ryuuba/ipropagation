//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

package informationpropagation.app;
import informationpropagation.base.InfectionBase;

//
// Infected nodes using this app broadcast infectious messages to neighboring 
// hosts. These nodes broadcast a message each "broadcastInterval" seconds.
// This interval is drawn from a probability distribution, e.g., exponential.
// If nodes are not infected, then this app listens to the wireless channel to 
// receive messages from neighboring hosts. The app accepts a message with
// a given "infectionProbability", otherwise, it drops the message.
// 
// At the start time, only a fraction of hosts are infected. During the
// simulation, this app tries to delete the infectious message with certain 
// "recoveryProbability" each "sendInterval" seconds.
//
// As common in distributed systems, execution of interruptions generated by 
// timers has greater priority than receiving a message. Therefore, infected 
// nodes first tries to recover from infection, then broadcast messages.
//
// This app is based on UdpBasicApp from the INET project. It does not support
// the INET lifecycle failure model. In turn, node motion is considered since
// this app is designed for analyzing ad hoc networks, e.g., MANETs or OPPNETs.

simple BroadcastInfectionApp extends InfectionBase
{
    parameters:
        @class(BroadcastInfectionApp);
        //App settings
        volatile int packetSize @unit(B); // length in bytes
        //probability that node start infected
        double initialInfectionProbability = default(0.5); 
        double recoveryProbability  = default(0.1); //a.k.a. mu
        double infectionProbability = default(0.1); //a.k.a eta
}
