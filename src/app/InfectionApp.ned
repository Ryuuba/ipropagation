//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

package infection.app;
import inet.applications.contract.IApp;

//
// Infected nodes using this app broadcast infectious messages to neighboring 
// hosts. These nodes broadcast a message each "broadcastInterval" seconds.
// This interval is drawn from a probability distribution, e.g., exponential.
// If nodes are not infected, then this app listens to the wireless channel to 
// receive messages from neighboring hosts. The app accepts a message with
// a given "infectionProbability", otherwise, it drops the message.
// 
// At the start time, only a fraction of hosts are infected. During the
// simulation, this app tries to delete the infectious message with certain 
// "recoveryProbability" each "sendInterval" seconds.
//
// As common in distributed systems, execution of interruptions generated by 
// timers has greater priority than receiving a message. Therefore, infected 
// nodes first tries to recover from infection, then broadcast messages.
//
// This app is based on UdpBasicApp from the INET project. It does not support
// the INET lifecycle failure model. In turn, node motion is considered since
// this app is designed for analyzing ad hoc networks, e.g., MANETs or OPPNETs.

simple Infection like InfectionBase
{
    parameters:
        //Parameters from InfectionBase interface
        @display("i=block/app"); //Ugly icon
        volatile double broadcastInterval @unit(s); //set it in the config file
        volatile double recoveryInterval @unit(s);  //set it in the config file
        double recoveryProbability; //a.k.a. mu
        double infectionProbability; //a.k.a. eta

        //App settings
        string destAddresses = default(""); // list of IP addresses, separated by spaces ("": don't send)
        string localAddress = default("");
        string packetName = default("UdpInfectionPacket");
        volatile int packetLength @unit(B); // length in bytes

        //UDP socket settings
        int localPort = default(-1);  // local port (-1: use ephemeral port)
        int destPort;
        int timeToLive = default(-1); // IP protocol setting
        bool dontFragment = default(true); // IP protocol setting
        int typeOfService = default(-1); // IP protocol setting 
        string multicastInterface = default("");  // if not empty, set the multicast output interface option on the socket (interface name expected)
        bool receiveBroadcast = default(false); // if true, makes the socket receive broadcast packets
        bool joinLocalMulticastGroups = default(false); // if true, makes the socket receive packets from all multicast groups set on local interfaces

        //Statistics
        @signal[sentMessage](type=long);
        @statistic[sentMessage](
          title="Number of sent messages";
          record=histogram,vector
        );
        @signal[receivedMessage](type=long);
        @statistic[receivedMessage](
          title="Number of received messages";
          record=histogram,vector
        );
        @signal[infectionTime](type=long);
        @statistic[infectionTime](
          title="Number of received messages";
          record=histogram,vector;
          unit=s
        );
    gates:
        input socketIn @labels(UdpControlInfo/up);
        output socketOut @labels(UdpControlInfo/down);
}
