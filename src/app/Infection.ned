//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU Lesser General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
// 
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU Lesser General Public License for more details.
// 
// You should have received a copy of the GNU Lesser General Public License
// along with this program.  If not, see http://www.gnu.org/licenses/.
// 

package oppnet.app;
import inet.applications.contract.IApp;

//
// Infected nodes using this app broadcast infection messages to neighboring 
// hosts. The rate at which messages are broadcasted is "count" messages per 
// "sendInterval" seconds. The "count" parameter draws its value from a 
// discrete uniform distribution U("countMin", "countMax").
// If nodes are not infected, then this app listens to the wireless channel to 
// receive messages from neighboring hosts. The app accepts those messages with
// a given "infectionProbability". 
// At the start time, only a fraction of hosts is infected. During the
// simulation, this app tries to delete the infected message with certain 
// "recoveryProbability" each "sendInterval" seconds. 
// This app calls a function that recovers the node every time a timer expires.
// As common in distributed systems, execution of interruptions generated by 
// timers has greater priority than receiving a message
//
simple Infection like IApp
{
    parameters:
        // destination address(es), separated by spaces, "*" means all IPv4/IPv6 
        // interfaces in entire simulation
        string destAddr = default(""); 
        int packetSize @unit(B) = default(56B); // of ping payload, in bytes
        // uses specified network protocol for communication; uses the address-
        // specified default network protocol when the parameter is empty
        string networkProtocol = default("");
        // time to wait between pings (can be random)
        volatile double sendInterval @unit(s) = default(1s);
        bool isInfected = default(false);
        int countMin = default(0);
        int countMax = default(5);
        int count = default(uniform(countMin, countMax));
        double recoveryProbability = default(0.5); //a.k.a. mu
        double infectionProbability = default(0.5); //a.k.a. delta
        @signal[infectionDuration](type=long);
        @statistic[infectionDuration](
            title="Duration of infection";
            unit=s;
            record=histogram,vector;
            interpolationmode=none
        );
    gates:
        input InfectionIn;
        input socketIn @labels(ITransportPacket/up);
        output socketOut @labels(ITransportPacket/down);
}
